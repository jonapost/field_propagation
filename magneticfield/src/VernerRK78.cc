/*
 ********************************************************************
 //                     |   Acknowledgement   |
 //                    -------------------------
 // The following code uses the work of Jim Verner, obtained from
 // http://people.math.sfu.ca/~jverner/
 //
 // Sets of all coefficients provided in attachments are copyrighted
 // as such by the author. They many not be published for general
 // distribution. They may be used for any research, industrial
 // application or development of software provided that any
 // product arising using any set of coefficients acknowledges this
 // source and includes the URL for this site within the produced
 // item.
 //
 ********************************************************************
 */

//  Verner - 8 - 5(4) implementation by Somnath Banerjee
//  Supervision / code review: John Apostolakis
//
//  Sponsored by Google in Google Summer of Code 2015.
// 
//  First version:  9 June 2015
//
//  This code is made available subject to the Geant4 license, a copy of
//  which is available at
//  http://geant4.org/license
//  
//  History
// -----------------------------
//  Created by Somnath on 9 June 2015.
//

#include "VernerRK78.hh"
#include "G4LineSection.hh"


//Constructor
VernerRK78::VernerRK78(G4EquationOfMotion *EqRhs,
                       G4int noIntegrationVariables,
                       G4bool primary)
: G4MagIntegratorStepper(EqRhs, noIntegrationVariables){
    
    const G4int numberOfVariables = noIntegrationVariables;
    
    //New Chunk of memory being created for use by the stepper
    
    //aki - for storing intermediate RHS
    ak2 = new G4double[numberOfVariables];
    ak3 = new G4double[numberOfVariables];
    ak4 = new G4double[numberOfVariables];
    ak5 = new G4double[numberOfVariables];
    ak6 = new G4double[numberOfVariables];
    ak7 = new G4double[numberOfVariables];
    ak8 = new G4double[numberOfVariables];
    ak9 = new G4double[numberOfVariables];
    ak10 = new G4double[numberOfVariables];
    ak11 = new G4double[numberOfVariables];
    ak12 = new G4double[numberOfVariables];
    ak13 = new G4double[numberOfVariables];
    
    yTemp = new G4double[numberOfVariables];
    yIn = new G4double[numberOfVariables] ;
    
    fLastInitialVector = new G4double[numberOfVariables] ;
    fLastFinalVector = new G4double[numberOfVariables] ;
    fLastDyDx = new G4double[numberOfVariables];
    
    fMidVector = new G4double[numberOfVariables];
    fMidError =  new G4double[numberOfVariables];
    if( primary )
    {
        fAuxStepper = new VernerRK78(EqRhs, numberOfVariables,
                                     !primary);
    }
}


//Destructor
VernerRK78::~VernerRK78(){
    //clear all previously allocated memory for stepper and DistChord
    delete[] ak2;
    delete[] ak3;
    delete[] ak4;
    delete[] ak5;
    delete[] ak6;
    delete[] ak7;
    delete[] ak8;
    delete[] ak9;
    delete[] ak10;
    delete[] ak11;
    delete[] ak12;
    delete[] ak13;
    delete[] yTemp;
    delete[] yIn;
    
    delete[] fLastInitialVector;
    delete[] fLastFinalVector;
    delete[] fLastDyDx;
    delete[] fMidVector;
    delete[] fMidError;
    
    delete fAuxStepper;
    
}


//Stepper :

// Passing in the value of yInput[],the first time dydx[] and Step length
// Giving back yOut and yErr arrays for output and error respectively

void VernerRK78::Stepper(const G4double yInput[],
                         const G4double dydx[],
                         G4double Step,
                         G4double yOut[],
                         G4double yErr[])
{
    G4int i;
    
    //The various constants defined on the basis of butcher tableu
    //G4double - only once
    const G4double
    
    b21 =  .5000000000000000000000000000000000000000e-1,
    
    b31 = -.6993164062500000000000000000000000000000e-2,
    b32 =  .1135556640625000000000000000000000000000,
    
    b41 =  .3996093750000000000000000000000000000000e-1,
    b42 =  0.,
    b43 =  .1198828125000000000000000000000000000000,
    
    b51 =  .3613975628004575124052940721184028345129,
    b52 =  0.,
    b53 = -1.341524066700492771819987788202715834917,
    b54 =  1.370126503900035259414693716084313000404,
    
    b61 =  .4904720279720279720279720279720279720280e-1,
    b62 =  0.,
    b63 =  0.,
    b64 =  .2350972042214404739862988335493427143122,
    b65 =  .1808555929813567288109039636534544884850,
    
    b71 =  .6169289044289044289044289044289044289044e-1,
    b72 =  0.,
    b73 =  0.,
    b74 =  .1123656831464027662262557035130015442303,
    b75 = -.3885046071451366767049048108111244567456e-1,
    b76 =  .1979188712522045855379188712522045855379e-1,
    
    b81 = -1.767630240222326875735597119572145586714,
    b82 =  0.,
    b83 =  0.,
    b84 = -62.50000000000000000000000000000000000000,
    b85 = -6.061889377376669100821361459659331999758,
    b86 =  5.650823198222763138561298030600840174201,
    b87 =  65.62169641937623283799566054863063741227,
    
    b91 = -1.180945066554970799825116282628297957882,
    b92 =  0.,
    b93 =  0.,
    b94 = -41.50473441114320841606641502701994225874,
    b95 = -4.434438319103725011225169229846100211776,
    b96 =  4.260408188586133024812193710744693240761,
    b97 =  43.75364022446171584987676829438379303004,
    b98 =  .7871425489912310687446475044226307550860e-2,
    
    b101 = -1.281405999441488405459510291182054246266,
    b102 =  0.,
    b103 =  0.,
    b104 = -45.04713996013986630220754257136007322267,
    b105 = -4.731362069449576477311464265491282810943,
    b106 =  4.514967016593807841185851584597240996214,
    b107 =  47.44909557172985134869022392235929015114,
    b108 =  .1059228297111661135687393955516542875228e-1,
    b109 = -.5746842263844616254432318478286296232021e-2,
    
    b111 = -1.724470134262485191756709817484481861731,
    b112 =  0.,
    b113 =  0.,
    b114 = -60.92349008483054016518434619253765246063,
    b115 = -5.951518376222392455202832767061854868290,
    b116 =  5.556523730698456235979791650843592496839,
    b117 =  63.98301198033305336837536378635995939281,
    b118 =  .1464202825041496159275921391759452676003e-1,
    b119 =  .6460408772358203603621865144977650714892e-1,
    b1110 = -.7930323169008878984024452548693373291447e-1,
    
    b121 = -3.301622667747079016353994789790983625569,
    b122 =  0.,
    b123 =  0.,
    b124 = -118.0112723597525085666923303957898868510,
    b125 = -10.14142238845611248642783916034510897595,
    b126 =  9.139311332232057923544012273556827000619,
    b127 =  123.3759428284042683684847180986501894364,
    b128 =  4.623244378874580474839807625067630924792,
    b129 = -3.383277738068201923652550971536811240814,
    b1210 =  4.527592100324618189451265339351129035325,
    b1211 = -5.828495485811622963193088019162985703755,
    
    b131 = -3.039515033766309030040102851821200251056,
    b132 =  0.,
    b133 =  0.,
    b134 = -109.2608680894176254686444192322164623352,
    b135 = -9.290642497400293449717665542656897549158,
    b136 =  8.430504981764911142134299253836167803454,
    b137 =  114.2010010378331313557424041095523427476,
    b138 = -.9637271342145479358162375658987901652762,
    b139 = -5.034884088802189791198680336183332323118,
    b1310 =  5.958130824002923177540402165388172072794,
    b1311 =  0.,
    b1312 =  0.,
    
    c1 =  .4427989419007951074716746668098518862111e-1,
    c2 =  0.,
    c3 =  0.,
    c4 =  0.,
    c5 =  0.,
    c6 =  .3541049391724448744815552028733568354121,
    c7 =  .2479692154956437828667629415370663023884,
    c8 = -15.69420203883808405099207034271191213468,
    c9 =  25.08406496555856261343930031237186278518,
    c10 = -31.73836778626027646833156112007297739997,
    c11 =  22.93828327398878395231483560344797018313,
    c12 = -.2361324633071542145259900641263517600737,
    
    dc1 = .4427989419007951074716746668098518862111e-1 - .4431261522908979212486436510209029764893e-1,
    dc2 =  0.,
    dc3 =  0.,
    dc4 =  0.,
    dc5 =  0.,
    dc6 =  .3541049391724448744815552028733568354121 - .3546095642343226447863179350895055038855,
    dc7 = .2479692154956437828667629415370663023884 - .2478480431366653069619986721504458660016,
    dc8 =  -15.69420203883808405099207034271191213468 - 4.448134732475784492725128317159648871312,
    dc9 =  25.08406496555856261343930031237186278518 - 19.84688636611873369930932399297687935291,
    dc10 =  -31.73836778626027646833156112007297739997 + 23.58162337746561841969517960870394965085,
    dc11 =  22.93828327398878395231483560344797018313,
    dc12 =  -.2361324633071542145259900641263517600737,
    dc13 =  +.3601679437289775162124536737746202409110 ;
    
    
//    
//    b21 =  1.0/20.0,
//    
//    b31 = -7161.0/1024000.0,
//    b32 =  116281.0/1024000.0,
//    
//    b41 =  1023.0/25600.0,
//    b42 =  0.0,
//    b43 =  3069.0/25600.0,
//    
//    b51 =  4202367.0/11628100.0,
//    b52 =  0.0,
//    b53 = -3899844.0/2907025.0,
//    b54 =  3982992.0/2907025.0,
//    
//    b61 =  5611.0/114400.0,
//    b62 =  0.0,
//    b63 =  0.0,
//    b64 =  31744.0/135025.0,
//    b65 =  923521.0/5106400.0,
//    
//    b71 =  21173.0/343200.0,
//    b72 =  0.0,
//    b73 =  0.0,
//    b74 =  8602624.0/76559175.0,
//    b75 = -26782109.0/689364000.0,
//    b76 =  5611.0/283500.0,
//    
//    b81 = -1221101821869329.0/690812928000000.0,
//    b82 =  0.0,
//    b83 =  0.0,
//    b84 = -125.0/2.0,
//    b85 = -1024030607959889.0/168929280000000.0,
//    b86 =  1501408353528689.0/265697280000000.0,
//    b87 =  6070139212132283.0/92502016000000.0,
//    
//    b91 = -1472514264486215803881384708877264246346044433307094207829051978044531801133057155.0/1246894801620032001157059621643986024803301558393487900440453636168046069686436608.0,
//    b92 =  0.0,
//    b93 =  0.0,
//    b94 = -5172294311085668458375175655246981230039025336933699114138315270772319372469280000.0/124619381004809145897278630571215298365257079410236252921850936749076487132995191.0,
//    
//    b95 = -12070679258469254807978936441733187949484571516120469966534514296406891652614970375.0/2722031154761657221710478184531100699497284085048389015085076961673446140398628096.0,
//    b96 =  780125155843893641323090552530431036567795592568497182701460674803126770111481625.0/183110425412731972197889874507158786859226102980861859505241443073629143100805376.0,
//    b97 =  664113122959911642134782135839106469928140328160577035357155340392950009492511875.0/15178465598586248136333023107295349175279765150089078301139943253016877823170816.0,
//    b98 =  10332848184452015604056836767286656859124007796970668046446015775000000.0/1312703550036033648073834248740727914537972028638950165249582733679393783.0,
//    
//    b101 = -29055573360337415088538618442231036441314060511.0/22674759891089577691327962602370597632000000000.0,
//    b102 =  0.0,
//    b103 =  0.0,
//    b104 = -20462749524591049105403365239069.0/454251913499893469596231268750.0,
//    b105 = -180269259803172281163724663224981097.0/38100922558256871086579832832000000.0,
//    b106 =  21127670214172802870128286992003940810655221489.0/4679473877997892906145822697976708633673728000.0,
//    b107 =  318607235173649312405151265849660869927653414425413.0/6714716715558965303132938072935465423910912000000.0,
//    b108 =  212083202434519082281842245535894.0/20022426044775672563822865371173879.0,
//    b109 = -2698404929400842518721166485087129798562269848229517793703413951226714583.0/469545674913934315077000442080871141884676035902717550325616728175875000000.0,
//    
//    b111 = -2342659845814086836951207140065609179073838476242943917.0/1358480961351056777022231400139158760857532162795520000.0,
//    b112 =  0.0,
//    b113 =  0.0,
//    b114 = -996286030132538159613930889652.0/16353068885996164905464325675.0,
//    b115 = -26053085959256534152588089363841.0/4377552804565683061011299942400.0,
//    b116 =  20980822345096760292224086794978105312644533925634933539.0/3775889992007550803878727839115494641972212962174156800.0,
//    b117 =  890722993756379186418929622095833835264322635782294899.0/13921242001395112657501941955594013822830119803764736.0,
//    b118 =  161021426143124178389075121929246710833125.0/10997207722131034650667041364346422894371443.0,
//    b119 =  300760669768102517834232497565452434946672266195876496371874262392684852243925359864884962513.0/4655443337501346455585065336604505603760824779615521285751892810315680492364106674524398280000.0,
//    b1110 = -31155237437111730665923206875.0/392862141594230515010338956291.0,
//    b121 = 2866556991825663971778295329101033887534912787724034363.0/868226711619262703011213925016143612030669233795338240.0,
//    b122 =  0.0,
//    b123 =  0.0,
//    b124 = -16957088714171468676387054358954754000.0/143690415119654683326368228101570221.0,
//    b125 = -4583493974484572912949314673356033540575.0/451957703655250747157313034270335135744.0,
//    b126 =  2346305388553404258656258473446184419154740172519949575.0/256726716407895402892744978301151486254183185289662464.0,
//    b127 =  1657121559319846802171283690913610698586256573484808662625.0/13431480411255146477259155104956093505361644432088109056.0,
//    b128 =  345685379554677052215495825476969226377187500.0/74771167436930077221667203179551347546362089.0,
//    b129 = -320589096271707254279143431215272753400810277402321024057136157075724905616701523016035208704867454219601.0/94756954968396581478301512445127360498465774712725761537244920597319265730601723910349107473832403325912.0,
//    b1210 =  40279545832706233433100438588458933210937500.0/8896460842799482846916972126377338947215101.0,
//    b1211 = -6122933601070769591613093993993358877250.0/1050517001510235513198246721302027675953.0,
//    b131 = -618675905535482500672800859344538410358660153899637.0/203544282118214047100119475340667684874292102389760.0,
//    b132 =  0.0,
//    b133 =  0.0,
//    b134 = -4411194916804718600478400319122931000.0/40373053902469967450761491269633019.0,
//    b135 = -16734711409449292534539422531728520225.0/1801243715290088669307203927210237952.0,
//    b136 =  135137519757054679098042184152749677761254751865630525.0/16029587794486289597771326361911895112703716593983488.0,
//    b137 =  38937568367409876012548551903492196137929710431584875.0/340956454090191606099548798001469306974758443147264.0,
//    b138 = -6748865855011993037732355335815350667265625.0/7002880395717424621213565406715087764770357.0,
//    b139 = -1756005520307450928195422767042525091954178296002788308926563193523662404739779789732685671.0/348767814578469983605688098046186480904607278021030540735333862087061574934154942830062320.0,
//    b1310 =  53381024589235611084013897674181629296875.0/8959357584795694524874969598508592944141.0,
//    b1311 =  0.0,
//    b1312 =  0.0,
//    
//    c1 =  44901867737754616851973.0/1014046409980231013380680.0,
//    c2 =  0.0,
//    c3 =  0.0,
//    c4 =  0.0,
//    c5 =  0.0,
//    c6 =  791638675191615279648100000.0/2235604725089973126411512319.0,
//    c7 =  3847749490868980348119500000.0/15517045062138271618141237517.0,
//    c8 = -13734512432397741476562500000.0/875132892924995907746928783.0,
//    c9 = 12274765470313196878428812037740635050319234276006986398294443554969616342274215316330684448207141.0/489345147493715517650385834143510934888829280686609654482896526796523353052166757299452852166040.0,
//    c10 = -9798363684577739445312500000.0/308722986341456031822630699.0,
//    c11 =  282035543183190840068750.0/12295407629873040425991.0,
//    c12 = -306814272936976936753.0/1299331183183744997286.0,
//    c13 =  0.0,
//    
//    dc1 =  c1 - 10835401739407019406577.0/244521829356935137978320.0,
//    dc2 =  0.0,
//    dc3 =  0.0,
//    dc4 =  0.0,
//    dc5 =  0.0,
//    dc6 =  c6 - 13908189778321895491375000.0/39221135527894265375640567.0,
//    dc7 =  c7- 73487947527027243487625000.0/296504045773342769773399443.0,
//    dc8 =  c8 - 68293140641257649609375000.0/15353208647806945749946119.0,
//    dc9 =  c9 - 22060647948996678611017711379974578860522018208949721559448560203338437626022142776381.0/1111542009262325874512959185795727215759010577565736079641376621381577236680929558640.0,
//    dc10 = c10 + 547971229495642458203125000.0/23237214025700991642563601.0,
//    dc11 =  c11,
//    dc12 =  c12,
//    dc13 = c13 + 28735456870978964189.0/79783493704265043693.0 ;
    
    
    //end of declaration !
    
    
    const G4int numberOfVariables= this->GetNumberOfVariables();
    
    // The number of variables to be integrated over
    yOut[7] = yTemp[7]  = yIn[7];
    //  Saving yInput because yInput and yOut can be aliases for same array
    
    for(i=0;i<numberOfVariables;i++)
    {
        yIn[i]=yInput[i];
    }
    
    
    
    // RightHandSide(yIn, dydx) ;
    // 1st Step - Not doing, getting passed
    
    for(i=0;i<numberOfVariables;i++)
    {
        yTemp[i] = yIn[i] + b21*Step*dydx[i] ;
    }
    RightHandSide(yTemp, ak2) ;              // 2nd Step
    
    for(i=0;i<numberOfVariables;i++)
    {
        yTemp[i] = yIn[i] + Step*(b31*dydx[i] + b32*ak2[i]) ;
    }
    RightHandSide(yTemp, ak3) ;              // 3rd Step
    
    for(i=0;i<numberOfVariables;i++)
    {
        yTemp[i] = yIn[i] + Step*(b41*dydx[i] + b42*ak2[i] + b43*ak3[i]) ;
    }
    RightHandSide(yTemp, ak4) ;              // 4th Step
    
    for(i=0;i<numberOfVariables;i++)
    {
        yTemp[i] = yIn[i] + Step*(b51*dydx[i] + b52*ak2[i] + b53*ak3[i] +
                                  b54*ak4[i]) ;
    }
    RightHandSide(yTemp, ak5) ;              // 5th Step
    
    for(i=0;i<numberOfVariables;i++)
    {
        yTemp[i] = yIn[i] + Step*(b61*dydx[i] + b62*ak2[i] + b63*ak3[i] +
                                  b64*ak4[i] + b65*ak5[i]) ;
    }
    RightHandSide(yTemp, ak6) ;              // 6th Step
    
    for(i=0;i<numberOfVariables;i++)
    {
        yTemp[i] = yIn[i] + Step*(b71*dydx[i] + b72*ak2[i] + b73*ak3[i] +
                                  b74*ak4[i] + b75*ak5[i] + b76*ak6[i]);
    }
    RightHandSide(yTemp, ak7);				//7th Step
    
    for(i=0;i<numberOfVariables;i++)
    {
        yTemp[i] = yIn[i] + Step*(b81*dydx[i] + b82*ak2[i] + b83*ak3[i] +
                                  b84*ak4[i] + b85*ak5[i] + b86*ak6[i] +
                                  b87*ak7[i]);
    }
    RightHandSide(yTemp, ak8);				//8th Step
    
    for(i=0;i<numberOfVariables;i++)
    {
        yTemp[i] = yIn[i] + Step*(b91*dydx[i] + b92*ak2[i] + b93*ak3[i] +
                                  b94*ak4[i] + b95*ak5[i] + b96*ak6[i] +
                                  b97*ak7[i] + b98*ak8[i] );
    }
    RightHandSide(yTemp, ak9);          //9th Step
    
    for(i=0;i<numberOfVariables;i++)
    {
        yTemp[i] = yIn[i] + Step*(b101*dydx[i] + b102*ak2[i] + b103*ak3[i] +
                                  b104*ak4[i] + b105*ak5[i] + b106*ak6[i] +
                                  b107*ak7[i] + b108*ak8[i] + b109*ak9[i]);
    }
    RightHandSide(yTemp, ak10);          //10th Step
    
    for(i=0;i<numberOfVariables;i++)
    {
        yTemp[i] = yIn[i] + Step*(b111*dydx[i] + b112*ak2[i] + b113*ak3[i] +
                                  b114*ak4[i] + b115*ak5[i] + b116*ak6[i] +
                                  b117*ak7[i] + b118*ak8[i] + b119*ak9[i] +
                                  b1110*ak10[i]);
    }
    RightHandSide(yTemp, ak11);			//11th Step
    
    for(i=0;i<numberOfVariables;i++)
    {
        yTemp[i] = yIn[i] + Step*(b121*dydx[i] + b122*ak2[i] + b123*ak3[i] +
                                  b124*ak4[i] + b125*ak5[i] + b126*ak6[i] +
                                  b127*ak7[i] + b128*ak8[i] + b129*ak9[i] +
                                  b1210*ak10[i] + b1211*ak11[i]);
    }
    RightHandSide(yTemp, ak12);			//12th Step
    
    for(i=0;i<numberOfVariables;i++)
    {
        yTemp[i] = yIn[i] + Step*(b131*dydx[i] + b132*ak2[i] + b133*ak3[i] +
                                  b134*ak4[i] + b135*ak5[i] + b136*ak6[i] +
                                  b137*ak7[i] + b138*ak8[i] + b139*ak9[i] +
                                  b1310*ak10[i] + b1311*ak11[i] + b1312*ak12[i]);
    }
    RightHandSide(yTemp, ak13);			//13th Step
    
    for(i=0;i<numberOfVariables;i++)
    {
        // Accumulate increments with proper weights
        
        yOut[i] = yIn[i] + Step*(c1*dydx[i] + c2*ak2[i] + c3*ak3[i] +
                                 c4*ak4[i] + c5*ak5[i] + c6*ak6[i] +
                                 c7*ak7[i] + c8*ak8[i] +c9*ak9[i] + c10*ak10[i]
                                 + c11*ak11[i] + c12*ak12[i]) ;
        
        // Estimate error as difference between 4th and
        // 5th order methods
        
        yErr[i] = Step*(dc1*dydx[i] + dc2*ak2[i] + dc3*ak3[i] + dc4*ak4[i] +
                        dc5*ak5[i] + dc6*ak6[i] + dc7*ak7[i] + dc8*ak8[i] +
                        dc9*ak9[i] + dc10*ak10[i] + dc11*ak11[i] + dc12*ak12[i]
                        + dc13*ak13[i] ) ;
        
        
    }
    
    fLastStepLength = Step;
    
    return ;
}


//The following has not been tested

//The DistChord() function fot the class - must define it here.
G4double  VernerRK78::DistChord() const
{
    G4double distLine, distChord;
    G4ThreeVector initialPoint, finalPoint, midPoint;
    
    // Store last initial and final points (they will be overwritten in self-Stepper call!)
    initialPoint = G4ThreeVector( fLastInitialVector[0],
                                 fLastInitialVector[1], fLastInitialVector[2]);
    finalPoint   = G4ThreeVector( fLastFinalVector[0],
                                 fLastFinalVector[1],  fLastFinalVector[2]);
    
    // Do half a step using StepNoErr
    
    fAuxStepper->Stepper( fLastInitialVector, fLastDyDx, 0.5 * fLastStepLength,
                         fMidVector,   fMidError );
    
    midPoint = G4ThreeVector( fMidVector[0], fMidVector[1], fMidVector[2]);
    
    // Use stored values of Initial and Endpoint + new Midpoint to evaluate
    //  distance of Chord
    
    
    if (initialPoint != finalPoint)
    {
        distLine  = G4LineSection::Distline( midPoint, initialPoint, finalPoint );
        distChord = distLine;
    }
    else
    {
        distChord = (midPoint-initialPoint).mag();
    }
    return distChord;
}










