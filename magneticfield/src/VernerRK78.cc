/*********************************************************************
  					|	Acknowledgement	  |
 
  The following code uses the work of J.H.Verner, obtained from
  http://people.math.sfu.ca/~jverner/
 
  Choice is tableau and interpolants of
    'A "most efficient" Runge--Kutta (8)7 Pair with Interpolants'

  Sets of all coefficients provided in attachments are copyrighted
  by the author. They are provided under the following conditions

  "They many not be published for general distribution. They may 
  be used for any research, industrial application or development 
  of software provided that any product arising using any set of 
  coefficients acknowledges this source and includes the URL for this 
  site within the produced item."
 *********************************************************************/

#include "VernerRK78.hh"
#include "G4LineSection.hh"


//Constructor
VernerRK78::VernerRK78(G4EquationOfMotion *EqRhs,
                       G4int noIntegrationVariables,
                       G4bool primary)
: G4MagIntegratorStepper(EqRhs, noIntegrationVariables){
    
    const G4int numberOfVariables = noIntegrationVariables;
    
    //New Chunk of memory being created for use by the stepper
    
    //aki - for storing intermediate RHS
    ak2 = new G4double[numberOfVariables];
    ak3 = new G4double[numberOfVariables];
    ak4 = new G4double[numberOfVariables];
    ak5 = new G4double[numberOfVariables];
    ak6 = new G4double[numberOfVariables];
    ak7 = new G4double[numberOfVariables];
    ak8 = new G4double[numberOfVariables];
    ak9 = new G4double[numberOfVariables];
    ak10 = new G4double[numberOfVariables];
    ak11 = new G4double[numberOfVariables];
    ak12 = new G4double[numberOfVariables];
    ak13 = new G4double[numberOfVariables];
    
    yTemp = new G4double[numberOfVariables];
    yIn = new G4double[numberOfVariables] ;
    
    fLastInitialVector = new G4double[numberOfVariables] ;
    fLastFinalVector = new G4double[numberOfVariables] ;
    fLastDyDx = new G4double[numberOfVariables];
    
    fMidVector = new G4double[numberOfVariables];
    fMidError =  new G4double[numberOfVariables];
    if( primary )
    {
        fAuxStepper = new VernerRK78(EqRhs, numberOfVariables,
                                     !primary);
    }
}


//Destructor
VernerRK78::~VernerRK78(){
    //clear all previously allocated memory for stepper and DistChord
    delete[] ak2;
    delete[] ak3;
    delete[] ak4;
    delete[] ak5;
    delete[] ak6;
    delete[] ak7;
    delete[] ak8;
    delete[] ak9;
    delete[] ak10;
    delete[] ak11;
    delete[] ak12;
    delete[] ak13;
    delete[] yTemp;
    delete[] yIn;
    
    delete[] fLastInitialVector;
    delete[] fLastFinalVector;
    delete[] fLastDyDx;
    delete[] fMidVector;
    delete[] fMidError;
    
    delete fAuxStepper;
    
}


//Stepper :

// Passing in the value of yInput[],the first time dydx[] and Step length
// Giving back yOut and yErr arrays for output and error respectively

void VernerRK78::Stepper(const G4double yInput[],
                         const G4double dydx[],
                               G4double Step,
                               G4double yOut[],
                               G4double yErr[])
{
    G4int i;
    
    //The various constants defined on the basis of butcher tableu
    //G4double - only once
    const G4double
    
    b21 =  .5000000000000000000000000000000000000000e-1,
    
    b31 = -.6993164062500000000000000000000000000000e-2,
    b32 =  .1135556640625000000000000000000000000000,
    
    b41 =  .3996093750000000000000000000000000000000e-1,
    b42 =  0.,
    b43 =  .1198828125000000000000000000000000000000,
    
    b51 =  .3613975628004575124052940721184028345129,
    b52 =  0.,
    b53 = -1.341524066700492771819987788202715834917,
    b54 =  1.370126503900035259414693716084313000404,
    
    b61 =  .4904720279720279720279720279720279720280e-1,
    b62 =  0.,
    b63 =  0.,
    b64 =  .2350972042214404739862988335493427143122,
    b65 =  .1808555929813567288109039636534544884850,
    
    b71 =  .6169289044289044289044289044289044289044e-1,
    b72 =  0.,
    b73 =  0.,
    b74 =  .1123656831464027662262557035130015442303,
    b75 = -.3885046071451366767049048108111244567456e-1,
    b76 =  .1979188712522045855379188712522045855379e-1,
    
    b81 = -1.767630240222326875735597119572145586714,
    b82 =  0.,
    b83 =  0.,
    b84 = -62.50000000000000000000000000000000000000,
    b85 = -6.061889377376669100821361459659331999758,
    b86 =  5.650823198222763138561298030600840174201,
    b87 =  65.62169641937623283799566054863063741227,
    
    b91 = -1.180945066554970799825116282628297957882,
    b92 =  0.,
    b93 =  0.,
    b94 = -41.50473441114320841606641502701994225874,
    b95 = -4.434438319103725011225169229846100211776,
    b96 =  4.260408188586133024812193710744693240761,
    b97 =  43.75364022446171584987676829438379303004,
    b98 =  .7871425489912310687446475044226307550860e-2,
    
    b101 = -1.281405999441488405459510291182054246266,
    b102 =  0.,
    b103 =  0.,
    b104 = -45.04713996013986630220754257136007322267,
    b105 = -4.731362069449576477311464265491282810943,
    b106 =  4.514967016593807841185851584597240996214,
    b107 =  47.44909557172985134869022392235929015114,
    b108 =  .1059228297111661135687393955516542875228e-1,
    b109 = -.5746842263844616254432318478286296232021e-2,
    
    b111 = -1.724470134262485191756709817484481861731,
    b112 =  0.,
    b113 =  0.,
    b114 = -60.92349008483054016518434619253765246063,
    b115 = -5.951518376222392455202832767061854868290,
    b116 =  5.556523730698456235979791650843592496839,
    b117 =  63.98301198033305336837536378635995939281,
    b118 =  .1464202825041496159275921391759452676003e-1,
    b119 =  .6460408772358203603621865144977650714892e-1,
    b1110 = -.7930323169008878984024452548693373291447e-1,
    
    b121 = -3.301622667747079016353994789790983625569,
    b122 =  0.,
    b123 =  0.,
    b124 = -118.0112723597525085666923303957898868510,
    b125 = -10.14142238845611248642783916034510897595,
    b126 =  9.139311332232057923544012273556827000619,
    b127 =  123.3759428284042683684847180986501894364,
    b128 =  4.623244378874580474839807625067630924792,
    b129 = -3.383277738068201923652550971536811240814,
    b1210 =  4.527592100324618189451265339351129035325,
    b1211 = -5.828495485811622963193088019162985703755,
    
    b131 = -3.039515033766309030040102851821200251056,
    b132 =  0.,
    b133 =  0.,
    b134 = -109.2608680894176254686444192322164623352,
    b135 = -9.290642497400293449717665542656897549158,
    b136 =  8.430504981764911142134299253836167803454,
    b137 =  114.2010010378331313557424041095523427476,
    b138 = -.9637271342145479358162375658987901652762,
    b139 = -5.034884088802189791198680336183332323118,
    b1310 =  5.958130824002923177540402165388172072794,
    b1311 =  0.,
    b1312 =  0.,
    
    c1 =  .4427989419007951074716746668098518862111e-1,
    c2 =  0.,
    c3 =  0.,
    c4 =  0.,
    c5 =  0.,
    c6 =  .3541049391724448744815552028733568354121,
    c7 =  .2479692154956437828667629415370663023884,
    c8 = -15.69420203883808405099207034271191213468,
    c9 =  25.08406496555856261343930031237186278518,
    c10 = -31.73836778626027646833156112007297739997,
    c11 =  22.93828327398878395231483560344797018313,
    c12 = -.2361324633071542145259900641263517600737,
   

    //Redundancy here - could directly use dci = ci - ._.
    dc1 = .4427989419007951074716746668098518862111e-1 - .4431261522908979212486436510209029764893e-1,
    dc2 =  0.,
    dc3 =  0.,
    dc4 =  0.,
    dc5 =  0.,
    dc6 =  .3541049391724448744815552028733568354121 - .3546095642343226447863179350895055038855,
    dc7 = .2479692154956437828667629415370663023884 - .2478480431366653069619986721504458660016,
    dc8 =  -15.69420203883808405099207034271191213468 - 4.448134732475784492725128317159648871312,
    dc9 =  25.08406496555856261343930031237186278518 - 19.84688636611873369930932399297687935291,
    dc10 =  -31.73836778626027646833156112007297739997 + 23.58162337746561841969517960870394965085,
    dc11 =  22.93828327398878395231483560344797018313,
    dc12 =  -.2361324633071542145259900641263517600737,
    dc13 =  +.3601679437289775162124536737746202409110 ;
    
    
    
    //end of declaration !
    
    
    const G4int numberOfVariables= this->GetNumberOfVariables();
    
    // The number of variables to be integrated over
    yOut[7] = yTemp[7]  = yIn[7];
    //  Saving yInput because yInput and yOut can be aliases for same array
    
    for(i=0;i<numberOfVariables;i++)
    {
        yIn[i]=yInput[i];
    }
    
    
    
    // RightHandSide(yIn, dydx) ;
    // 1st Step - Not doing, getting passed
    
    for(i=0;i<numberOfVariables;i++)
    {
        yTemp[i] = yIn[i] + b21*Step*dydx[i] ;
    }
    RightHandSide(yTemp, ak2) ;              // 2nd Step
    
    for(i=0;i<numberOfVariables;i++)
    {
        yTemp[i] = yIn[i] + Step*(b31*dydx[i] + b32*ak2[i]) ;
    }
    RightHandSide(yTemp, ak3) ;              // 3rd Step
    
    for(i=0;i<numberOfVariables;i++)
    {
        yTemp[i] = yIn[i] + Step*(b41*dydx[i] + b42*ak2[i] + b43*ak3[i]) ;
    }
    RightHandSide(yTemp, ak4) ;              // 4th Step
    
    for(i=0;i<numberOfVariables;i++)
    {
        yTemp[i] = yIn[i] + Step*(b51*dydx[i] + b52*ak2[i] + b53*ak3[i] +
                                  b54*ak4[i]) ;
    }
    RightHandSide(yTemp, ak5) ;              // 5th Step
    
    for(i=0;i<numberOfVariables;i++)
    {
        yTemp[i] = yIn[i] + Step*(b61*dydx[i] + b62*ak2[i] + b63*ak3[i] +
                                  b64*ak4[i] + b65*ak5[i]) ;
    }
    RightHandSide(yTemp, ak6) ;              // 6th Step
    
    for(i=0;i<numberOfVariables;i++)
    {
        yTemp[i] = yIn[i] + Step*(b71*dydx[i] + b72*ak2[i] + b73*ak3[i] +
                                  b74*ak4[i] + b75*ak5[i] + b76*ak6[i]);
    }
    RightHandSide(yTemp, ak7);				//7th Step
    
    for(i=0;i<numberOfVariables;i++)
    {
        yTemp[i] = yIn[i] + Step*(b81*dydx[i] + b82*ak2[i] + b83*ak3[i] +
                                  b84*ak4[i] + b85*ak5[i] + b86*ak6[i] +
                                  b87*ak7[i]);
    }
    RightHandSide(yTemp, ak8);				//8th Step
    
    for(i=0;i<numberOfVariables;i++)
    {
        yTemp[i] = yIn[i] + Step*(b91*dydx[i] + b92*ak2[i] + b93*ak3[i] +
                                  b94*ak4[i] + b95*ak5[i] + b96*ak6[i] +
                                  b97*ak7[i] + b98*ak8[i] );
    }
    RightHandSide(yTemp, ak9);          //9th Step
    
    for(i=0;i<numberOfVariables;i++)
    {
        yTemp[i] = yIn[i] + Step*(b101*dydx[i] + b102*ak2[i] + b103*ak3[i] +
                                  b104*ak4[i] + b105*ak5[i] + b106*ak6[i] +
                                  b107*ak7[i] + b108*ak8[i] + b109*ak9[i]);
    }
    RightHandSide(yTemp, ak10);          //10th Step
    
    for(i=0;i<numberOfVariables;i++)
    {
        yTemp[i] = yIn[i] + Step*(b111*dydx[i] + b112*ak2[i] + b113*ak3[i] +
                                  b114*ak4[i] + b115*ak5[i] + b116*ak6[i] +
                                  b117*ak7[i] + b118*ak8[i] + b119*ak9[i] +
                                  b1110*ak10[i]);
    }
    RightHandSide(yTemp, ak11);			//11th Step
    
    for(i=0;i<numberOfVariables;i++)
    {
        yTemp[i] = yIn[i] + Step*(b121*dydx[i] + b122*ak2[i] + b123*ak3[i] +
                                  b124*ak4[i] + b125*ak5[i] + b126*ak6[i] +
                                  b127*ak7[i] + b128*ak8[i] + b129*ak9[i] +
                                  b1210*ak10[i] + b1211*ak11[i]);
    }
    RightHandSide(yTemp, ak12);			//12th Step
    
    for(i=0;i<numberOfVariables;i++)
    {
        yTemp[i] = yIn[i] + Step*(b131*dydx[i] + b132*ak2[i] + b133*ak3[i] +
                                  b134*ak4[i] + b135*ak5[i] + b136*ak6[i] +
                                  b137*ak7[i] + b138*ak8[i] + b139*ak9[i] +
                                  b1310*ak10[i] + b1311*ak11[i] + b1312*ak12[i]);
    }
    RightHandSide(yTemp, ak13);			//13th Step
    
    for(i=0;i<numberOfVariables;i++)
    {
        // Accumulate increments with proper weights
        
        yOut[i] = yIn[i] + Step*(c1*dydx[i] + c2*ak2[i] + c3*ak3[i] +
                                 c4*ak4[i] + c5*ak5[i] + c6*ak6[i] +
                                 c7*ak7[i] + c8*ak8[i] +c9*ak9[i] + c10*ak10[i]
                                 + c11*ak11[i] + c12*ak12[i]) ;
        
        // Estimate error as difference between 4th and
        // 5th order methods
        
        yErr[i] = Step*(dc1*dydx[i] + dc2*ak2[i] + dc3*ak3[i] + dc4*ak4[i] +
                        dc5*ak5[i] + dc6*ak6[i] + dc7*ak7[i] + dc8*ak8[i] +
                        dc9*ak9[i] + dc10*ak10[i] + dc11*ak11[i] + dc12*ak12[i]
                        + dc13*ak13[i] ) ;
        
        // Store Input and Final values, for possible use in calculating chord
        fLastInitialVector[i] = yIn[i] ;
        fLastFinalVector[i]   = yOut[i];
        fLastDyDx[i]          = dydx[i];
    }
    
    fLastStepLength = Step;
    
    return ;
}


//The following has not been tested

//The DistChord() function fot the class - must define it here.
G4double  VernerRK78::DistChord() const
{
    G4double distLine, distChord;
    G4ThreeVector initialPoint, finalPoint, midPoint;
    
    // Store last initial and final points (they will be overwritten in self-Stepper call!)
    initialPoint = G4ThreeVector( fLastInitialVector[0],
                                 fLastInitialVector[1], fLastInitialVector[2]);
    finalPoint   = G4ThreeVector( fLastFinalVector[0],
                                 fLastFinalVector[1],  fLastFinalVector[2]);
    
    // Do half a step using StepNoErr
    
    fAuxStepper->Stepper( fLastInitialVector, fLastDyDx, 0.5 * fLastStepLength,
                         fMidVector,   fMidError );
    
    midPoint = G4ThreeVector( fMidVector[0], fMidVector[1], fMidVector[2]);
    
    // Use stored values of Initial and Endpoint + new Midpoint to evaluate
    //  distance of Chord
    
    
    if (initialPoint != finalPoint)
    {
        distLine  = G4LineSection::Distline( midPoint, initialPoint, finalPoint );
        distChord = distLine;
    }
    else
    {
        distChord = (midPoint-initialPoint).mag();
    }
    return distChord;
}

G4double VernerRK78::DistChord2() const{
    return 2.0;
}

void VernerRK78::SetupInterpolate_low( const G4double yInput[],
                                       const G4double dydx[],
                                  	   const G4double Step ){


    //  FOUR ADDITIONAL STAGES FOR INTERPOLANT OF ORDER  7

    G4double
    //Coupling coefficients for
    //c14 = 1.0
    
    b141 =  .4427989419007951074716746668098518862111e-1 ,
    b142 =  0. ,
    b143 =  0. ,
    b144 =  0. ,
    b145 =  0. ,
    b146 =  .3541049391724448744815552028733568354121 ,
    b147 =  .2479692154956437828667629415370663023884 ,
    b148 = -15.69420203883808405099207034271191213468 ,
    b149 =  25.08406496555856261343930031237186278518 ,
    b1410 = -31.73836778626027646833156112007297739997 ,
    b1411 =  22.93828327398878395231483560344797018313 ,
    b1412 = -.2361324633071542145259900641263517600737 ,
    b1413 =  0. ,
    //
    //********************************************************
    //
    //  Coupling coefficients for
    //c15 =  .3110177634953863863927417318829099695921
    //  ----------------------------------------------------
    b151 =  .4620700646754963101730413150238116432863e-1 ,
    b152 =  0. ,
    b153 =  0. ,
    b154 =  0. ,
    b155 =  0. ,
    b156 =  .4503904160842480866828520384400679697151e-1 ,
    b157 =  .2336816697713424410788701065340221126565 ,
    b158 =  37.83901368421067410780338220861855254153 ,
    b159 = -15.94911328945424610266139490307397370835 ,
    b1510 =  23.02836835181610285142510596329590091940 ,
    b1511 = -44.85578507769412524816130998016948002745 ,
    b1512 = -.6379858768647444009509067402330140781326e-1 ,
    b1513 =  0. ,
    b1514 = -.1259503554386166268241032464519842162533e-1 ,
    //
    //********************************************************
    //
    //  Coupling coefficients for
    //c16 =  .1725
    //  ----------------------------------------------------
    b161 =  .5037946855482040993065158747220696112586e-1 ,
    b162 =  0. ,
    b163 =  0. ,
    b164 =  0. ,
    b165 =  0. ,
    b166 =  .4109836131046079339916530614028848248545e-1 ,
    b167 =  .1718054153348195783296309209549424619697 ,
    b168 =  4.61410531998151886974342237185977124648 ,
    b169 = -1.791667883085396449712744996746836471721 ,
    b1610 =  2.531658930485041408462243518792913614971 ,
    b1611 = -5.32497786020573071925718815977276269909 ,
    b1612 = -.3065532595385634734924449496356513113607e-1 ,
    b1613 =  0. ,
    b1614 = -.5254479979429613570549519094377878106127e-2 ,
    b1615 = -.8399194644224792997538653464258058697156e-1 ,
    //
    //********************************************************
    //
    //  Coupling coefficients for
    //c17 =  .7846
    //  ----------------------------------------------------
    b171 =  .4082897132997079620207118756242653796386e-1 ,
    b172 =  0. ,
    b173 =  0. ,
    b174 =  0. ,
    b175 =  0. ,
    b176 =  .4244479514247632218892086657732332485609 ,
    b177 =  .2326091531275234539465100096964845486081 ,
    b178 =  2.677982520711806062780528871014035962908 ,
    b179 =  .7420826657338945216477607044022963622057 ,
    b1710 =  .1460377847941461193920992339731312296021 ,
    b1711 = -3.579344509890565218033356743825917680543 ,
    b1712 =  .1138844389600173704531638716149985665239 ,
    b1713 =  0. ,
    b1714 =  .1267790651033190047378693537615687232109e-1 ,
    b1715 = -.7443436349946674429752785032561552478382e-1 ,
    b1716 =  .4782748079757851554575511473876987663388e-1 ;
    
    
    const G4int numberOfVariables= this->GetNumberOfVariables();
    
    //  Saving yInput because yInput and yOut can be aliases for same array
    for(int i=0;i<numberOfVariables;i++)
    {
        yIn[i]=yInput[i];
    }
    
    yTemp[7]  = yIn[7];

    
    ak14 = new G4double[numberOfVariables];
    ak15 = new G4double[numberOfVariables];
    ak16 = new G4double[numberOfVariables];
    ak17 = new G4double[numberOfVariables];
    
    
    
    //    calculating extra stage functions

    //Evaluate the stages :
    
    for(G4int i=0;i<numberOfVariables;i++)
    {
        yTemp[i] = yIn[i] + Step*(b141*dydx[i] + b142*ak2[i] + b143*ak3[i] +
                                  b144*ak4[i] + b145*ak5[i] + b146*ak6[i] +
                                  b147*ak7[i] + b148*ak8[i] + b149*ak9[i] +
                                  b1410*ak10[i] + b1411*ak11[i] + b1412*ak12[i] +
                                  b1413*ak13[i] );
    }
    RightHandSide(yTemp, ak14);			//14th Stage
    
    for(G4int i=0; i<numberOfVariables; i++)
    {
        yTemp[i] = yIn[i] + Step*(b151*dydx[i] + b152*ak2[i] + b153*ak3[i] +
                                  b154*ak4[i] + b155*ak5[i] + b156*ak6[i] +
                                  b157*ak7[i] + b158*ak8[i] + b159*ak9[i] +
                                  b1510*ak10[i] + b1511*ak11[i] + b1512*ak12[i] +
                                  b1513*ak13[i] + b1514*ak14[i]);
    }
    RightHandSide(yTemp, ak15);			//15th Stage

    
    for(G4int i=0;i<numberOfVariables;i++)
    {
        yTemp[i] = yIn[i] + Step*(b161*dydx[i] + b162*ak2[i] + b163*ak3[i] +
                                  b164*ak4[i] + b165*ak5[i] + b166*ak6[i] +
                                  b167*ak7[i] + b168*ak8[i] + b169*ak9[i] +
                                  b1610*ak10[i] + b1611*ak11[i] + b1612*ak12[i] +
                                  b1613*ak13[i] + b1614*ak14[i] +b1615*ak15[i]
                                  );
    }
    RightHandSide(yTemp, ak16);			//16th Stage

    for(G4int i=0;i<numberOfVariables;i++)
    {
        yTemp[i] = yIn[i] + Step*(b171*dydx[i] + b172*ak2[i] + b173*ak3[i] +
                                  b174*ak4[i] + b175*ak5[i] + b176*ak6[i] +
                                  b177*ak7[i] + b178*ak8[i] + b179*ak9[i] +
                                  b1710*ak10[i] + b1711*ak11[i] + b1712*ak12[i] +
                                  b1713*ak13[i] + b1714*ak14[i] +b1715*ak15[i] +
                                  b1716*ak16[i]);
    }
    RightHandSide(yTemp, ak17);			//17th Stage

    
}

void VernerRK78::Interpolate_low( const G4double yInput[],
                              	  const G4double dydx[],
                                  const G4double Step,
                             			G4double yOut[],
                             			G4double tau ){
 	//Define the coefficients for the polynomials
    G4double bi7[18][8], b[18];
    G4int numberOfVariables = this->GetNumberOfVariables();


    //
    //  --------------------------------------------------------
    //  COEFFICIENTS FOR INTERPOLANT bi7  WITH  17  STAGES
    //  --------------------------------------------------------
    
    //  COEFFICIENTS OF   bi7[ 1]
    bi7[1][1] =  1. ,
    bi7[1][2] = -7.238550783576432811855355839508646327161 ,
    bi7[1][3] =  26.00913483254676138219215542805486438340 ,
    bi7[1][4] = -50.23684777762566731759165474184543812128 ,
    bi7[1][5] =  52.12072084601022449485077581012685809554 ,
    bi7[1][6] = -27.06472451211777193118825764262673140465 ,
    bi7[1][7] =  5.454547288952965694339504452480078562780 ,
    //  --------------------------------------------------------
    //
    //  COEFFICIENTS OF  bi7[2]
    bi7[2][1] =  0. ,
    bi7[2][2] =  0. ,
    bi7[2][3] =  0. ,
    bi7[2][4] =  0. ,
    bi7[2][5] =  0. ,
    bi7[2][6] =  0. ,
    bi7[2][7] =  0. ,
    //  --------------------------------------------------------
    //
    //  COEFFICIENTS OF  bi7[3]
    bi7[3][1] =  0. ,
    bi7[3][2] =  0. ,
    bi7[3][3] =  0. ,
    bi7[3][4] =  0. ,
    bi7[3][5] =  0. ,
    bi7[3][6] =  0. ,
    bi7[3][7] =  0. ,
    //  --------------------------------------------------------
    //
    //  COEFFICIENTS OF  bi7[4]
    bi7[4][1] =  0. ,
    bi7[4][2] =  0. ,
    bi7[4][3] =  0. ,
    bi7[4][4] =  0. ,
    bi7[4][5] =  0. ,
    bi7[4][6] =  0. ,
    bi7[4][7] =  0. ,
    //  --------------------------------------------------------
    //
    //  COEFFICIENTS OF  bi7[5]
    bi7[5][1] =  0. ,
    bi7[5][2] =  0. ,
    bi7[5][3] =  0. ,
    bi7[5][4] =  0. ,
    bi7[5][5] =  0. ,
    bi7[5][6] =  0. ,
    bi7[5][7] =  0. ,
    //  --------------------------------------------------------
    //
    //  COEFFICIENTS OF  bi7[6]
    bi7[6][1] =  0. ,
    bi7[6][2] =  11.15330887588935170976376962782446833855 ,
    bi7[6][3] = -91.7609656398961659890179437322816238711 ,
    bi7[6][4] =  291.7074241722059450113911477530513089255 ,
    bi7[6][5] = -430.4096692910862817449451677633631387823 ,
    bi7[6][6] =  299.4531188198997479843407054776900024282 ,
    bi7[6][7] = -79.78911199784015209705095616004766020335 ,
    //  --------------------------------------------------------
    //
    //  COEFFICIENTS OF  bi7[7]
    bi7[7][1] =  0. ,
    bi7[7][2] =  2.34875229807309355640904629061136935335 ,
    bi7[7][3] = -11.6724894172018429369093778842231443146 ,
    bi7[7][4] = -3.339139076505928386509206543237093540 ,
    bi7[7][5] =  94.885262249720610030798242337479596095 ,
    bi7[7][6] = -143.071126583012024456409244370652716962 ,
    bi7[7][7] =  61.0967097444217359754873031115590556707 ,
    //  --------------------------------------------------------
    //
    //  COEFFICIENTS OF  bi7[8]
    bi7[8][1] =  0. ,
    bi7[8][2] = -1027.321675339240679090464776362465090654 ,
    bi7[8][3] =  9198.71432360760879019681406218311101879 ,
    bi7[8][4] = -33189.78048157363822223641020734287802492 ,
    bi7[8][5] =  57750.0831348887181073584126028277545727 ,
    bi7[8][6] = -47698.93315706261990169947144294597707756 ,
    bi7[8][7] =  14951.54365344033382142012769129774268946 ,
    //  --------------------------------------------------------
    //
    //  COEFFICIENTS OF  bi7[9]
    bi7[9][1] =  0. ,
    bi7[9][2] =  1568.546608927281956416687915664731868885 ,
    bi7[9][3] = -13995.38852541600542155322174511897930298 ,
    bi7[9][4] =  50256.2124698102445419491620666726469821 ,
    bi7[9][5] = -86974.5128036219909523950692144595063700 ,
    bi7[9][6] =  71494.7977095997701213661747332399327008 ,
    bi7[9][7] = -22324.57139433374168317029445568645401598 ,
    //  --------------------------------------------------------
    //
    //  COEFFICIENTS OF  bi7[10]
    bi7[10][1] =  0. ,
    bi7[10][2] = -2000.882061921041961546811133479107090218 ,
    bi7[10][3] =  17864.36380347691630038038755096765127729 ,
    bi7[10][4] = -64205.1907515562863000297926577113695108 ,
    bi7[10][5] =  111224.8489930378077126420609392735999202 ,
    bi7[10][6] = -91509.3392102130338542605593697286718077 ,
    bi7[10][7] =  28594.46085938937782634638310955782423389 ,
    //  --------------------------------------------------------
    //
    //  COEFFICIENTS OF  bi7[11]
    bi7[11][1] =  0. ,
    bi7[11][2] =  1496.620400693446268810344884971434468267 ,
    bi7[11][3] = -13397.55405171476021512904990709508924800 ,
    bi7[11][4] =  48323.5602199437493999696912750109765015 ,
    bi7[11][5] = -84051.4283423393032636942266780744607468 ,
    bi7[11][6] =  69399.8582111570893316100585838633124312 ,
    bi7[11][7] = -21748.11815446623273761450332307272543593 ,
    //  --------------------------------------------------------
    //
    //  COEFFICIENTS OF  bi7[12]
    bi7[12][1] =  0. ,
    bi7[12][2] = -16.41320775560933621675902845723196069900 ,
    bi7[12][3] =  147.6097045407002371315249807692915435608 ,
    bi7[12][4] = -535.719963714732106447158760197417632645 ,
    bi7[12][5] =  938.286247077820650371318861625025573381 ,
    bi7[12][6] = -779.438309639349328345148153897689081893 ,
    bi7[12][7] =  245.4393970278627292916961100938952065362 ,
    //  --------------------------------------------------------
    //
    //  COEFFICIENTS OF  bi7[13]
    bi7[13][1] =  0. ,
    bi7[13][2] =  0.,
    bi7[13][3] =  0. ,
    bi7[13][4] =  0. ,
    bi7[13][5] =  0. ,
    bi7[13][6] =  0. ,
    bi7[13][7] =  0. ,
    //  --------------------------------------------------------
    //
    //  COEFFICIENTS OF  bi7[14]
    bi7[14][1] =  0. ,
    bi7[14][2] = -4.29672443178246482824254064733546854251 ,
    bi7[14][3] =  38.6444746111678092366406218271498656093 ,
    bi7[14][4] = -140.3503471762808981414524290552248895548 ,
    bi7[14][5] =  246.3954669697502467443139611011701827640 ,
    bi7[14][6] = -205.8341686964167118696204191085878165880 ,
    bi7[14][7] =  65.44129872356201885836080588282812631205 ,
    //  --------------------------------------------------------
    //
    //  COEFFICIENTS OF  bi7[15]
    bi7[15][1] =  0. ,
    bi7[15][2] = -20.41628069294821485579834313809132051248 ,
    bi7[15][3] =  153.5213232524836445391962375168798263930 ,
    bi7[15][4] = -436.5502610211220460266289847121377276100 ,
    bi7[15][5] =  598.214644262650861959065070073603792110 ,
    bi7[15][6] = -398.7823950071290897160364203878571043995 ,
    bi7[15][7] =  104.0129692060648441002024406476025340187 ,
    //  --------------------------------------------------------
    //
    //  COEFFICIENTS OF  bi7[16]
    bi7[16][1] =  0. ,
    bi7[16][2] =  16.53007184264271512356106095760699278945 ,
    bi7[16][3] = -96.6861433615782065041742809436987893361 ,
    bi7[16][4] =  268.959934219531723149495873437076657635 ,
    bi7[16][5] = -428.681909788964647271837835032326719249 ,
    bi7[16][6] =  354.578231152433375494079868740183658991 ,
    bi7[16][7] = -114.7001840640649599911246871588418008302 ,
    //  --------------------------------------------------------
    // 
    //  COEFFICIENTS OF  bi7[17]
    bi7[17][1] =  0. ,
    bi7[17][2] = -18.63064171313429626683549958846959067803 ,
    bi7[17][3] =  164.1994112280183092456176460821337125030 ,
    bi7[17][4] = -579.272256249540441494196462569641132906 ,
    bi7[17][5] =  980.198255708866731505258442280896479501 ,
    bi7[17][6] = -786.224179015513894176220583239056456901 ,
    bi7[17][7] =  239.7294100413035911863764570341369884827 ;
    
    
    for(G4int i = 0; i< numberOfVariables; i++)
        yIn[i] = yInput[i];
    
    G4double tau0 = tau;
    //    Calculating the polynomials :

    for(int i=1; i<=17; i++){	//Here i is NOT the coordinate no. , it's stage no.
        b[i] = 0;
        tau = tau0;
        for(int j=1; j<=7; j++){
            b[i] += bi7[i][j]*tau;
            tau*=tau0;
        }
    }
    
    for(int i=0; i<numberOfVariables; i++){		//Here is IS the cooridnate no.
        yOut[i] = yIn[i] + Step*(b[1]*dydx[i] + b[2]*ak2[i] + b[3]*ak3[i] +
                                 b[4]*ak4[i] + b[5]*ak5[i] + b[6]*ak6[i] +
                                 b[7]*ak7[i] + b[8]*ak8[i] + b[9]*ak9[i] +
                                 b[10]*ak10[i] + b[11]*ak11[i] + b[12]*ak12[i] +
                                 b[13]*ak13[i] + b[14]*ak14[i] + b[15]*ak15[i] +
                                 b[16]*ak16[i] + b[17]*ak17[i]);
    }

    
}

void VernerRK78::SetupInterpolate_high( const G4double yInput[],
                           				const G4double dydx[],
                                       	const G4double Step ){
    SetupInterpolate_low(yInput, dydx, Step);
    		//This sets *ak14, *ak15, *ak16, *ak17
    G4int numberOfVariables = this->GetNumberOfVariables();
    
    G4double
    b181 =  .5212682393668413629928136927994514676607e-1 ,
    b182 =  0. ,
    b183 =  0. ,
    b184 =  0. ,
    b185 =  0. ,
    b186 =  .5392508396744797718209106862347065628649e-1 ,
    b187 =  .1660758097434640828541930599928251901718e-1 ,
    b188 = -4.454485757926779655418936993298463071587 ,
    b189 =  6.835218278632146381711296817968152631469 ,
    b1810 = -8.711334822181993739847172734848837971169 ,
    b1811 =  6.491635839232917053651267142703105653517 ,
    b1812 = -.7072551809844346422069985227700294651922e-1 ,
    b1813 =  0. ,
    b1814 = -.1854031491993216429111842937941202966440e-1 ,
    b1815 =  .2350402105435384645116542087045962190647e-1 ,
    b1816 =  .2344795103407822090556377813402774776461 ,
    b1817 = -.8241072501152898885823089698097768766651e-1 ,
    
    b191 =  .5020102870355713598699964419977883461362e-1 ,
    b192 =  0. ,
    b193 =  0. ,
    b194 =  0. ,
    b195 =  0. ,
    b196 =  .1552209034795498114932226104700567642339 ,
    b197 =  .1264268424089234914713091134864747506300 ,
    b198 = -5.14920630353984701704917414605721854951 ,
    b199 =  8.46834099903692926607453176331494311551 ,
    b1910 = -10.66213068108149527544209836207095498430 ,
    b1911 =  7.54183322495972836290996201569018333903 ,
    b1912 = -.743696811383214243944066492459357053774e-1 ,
    b1913 =  0. ,
    b1914 = -.2055887686618382619339821759221121764364e-1 ,
    b1915 =  .775379526471029807261782993777862395844e-1 ,
    b1916 =  .1046259220352544296313761971333987587377 ,
    b1917 = -.1179213306451979352145022687063013455111 ,
    b1918 =  0. ,
    
    b201 =  .3737341446457825692757506548800094134977e-1 ,
    b202 =  0. ,
    b203 =  0. ,
    b204 =  0. ,
    b205 =  0. ,
    b206 =  .3504930705338316406767087468339071089224 ,
    b207 =  .4922652819373025433298989824173484805373 ,
    b208 =  8.553695439359312242284304421725315855379 ,
    b209 = -10.35317299030591348532574006719207803272 ,
    b2010 =  13.83320427252914990351082875460544773493 ,
    b2011 = -12.28092433078461863729523583784519048012 ,
    b2012 =  .1719151595656509762746810113378644307112 ,
    b2013 =  0. ,
    b2014 =  .3641583114314496380113822384214528216140e-1 ,
    b2015 =  .2961920580288763054890146412520723429115e-1 ,
    b2016 = -.2651793938627067002647615623738425030047 ,
    b2017 =  .942950396173806655317007970358739475630e-1 ,
    b2018 =  0. ,
    b2019 =  0. ,
    
    b211 =  .3939058345528250943410670634923521987132e-1 ,
    b212 =  0. ,
    b213 =  0. ,
    b214 =  0. ,
    b215 =  0. ,
    b216 =  .3558516141234424183136697322755323715063 ,
    b217 =  .4197382225952610029372225526720065366258 ,
    b218 =  .872044977807194166293172525204036071060 ,
    b219 =  .898952083487659486126627160171417043611 ,
    b2110 = -.630580616105988359023456649527853470403 ,
    b2111 = -1.121887220595483550736681645425215081433 ,
    b2112 =  .4298219512400197176967511031829197714867e-1 ,
    b2113 =  0. ,
    b2114 =  .1332557566873915707013495891889190564164e-1 ,
    b2115 =  .1876227053964148034446101291928097773800e-1 ,
    b2116 = -.1859411132922105570515379368592596513699 ,
    b2117 =  .1773614271924602745226064729836361000042 ,
    b2118 =  0. ,
    b2119 =  0. ,
    b2120 =  0. ;

    for(int i=0;i<numberOfVariables;i++)
    {
        yIn[i]=yInput[i];
    }
    
    yTemp[7]  = yIn[7];
    
    ak18 = new G4double[numberOfVariables];
    ak19 = new G4double[numberOfVariables];
    ak20 = new G4double[numberOfVariables];
    ak21 = new G4double[numberOfVariables];

    for(G4int i=0;i<numberOfVariables;i++)
    {
        yTemp[i] = yIn[i] + Step*(b181*dydx[i] + b182*ak2[i] + b183*ak3[i] +
                                  b184*ak4[i] + b185*ak5[i] + b186*ak6[i] +
                                  b187*ak7[i] + b188*ak8[i] + b189*ak9[i] +
                                  b1810*ak10[i] + b1811*ak11[i] + b1812*ak12[i] +
                                  b1813*ak13[i] + b1814*ak14[i] +b1815*ak15[i] +
                                  b1816*ak16[i] + b1817*ak17[i]
                                  );
    }
    RightHandSide(yTemp, ak18);			//18th Stage
    
    for(G4int i=0;i<numberOfVariables;i++)
    {
        yTemp[i] = yIn[i] + Step*(b191*dydx[i] + b192*ak2[i] + b193*ak3[i] +
                                  b194*ak4[i] + b195*ak5[i] + b196*ak6[i] +
                                  b197*ak7[i] + b198*ak8[i] + b199*ak9[i] +
                                  b1910*ak10[i] + b1911*ak11[i] + b1912*ak12[i] +
                                  b1913*ak13[i] + b1914*ak14[i] +b1915*ak15[i] +
                                  b1916*ak16[i] + b1917*ak17[i] + b1918*ak18[i]
                                  );
    }
    RightHandSide(yTemp, ak19);			//19th Stage
    
    for(G4int i=0;i<numberOfVariables;i++)
    {
        yTemp[i] = yIn[i] + Step*(b201*dydx[i] + b202*ak2[i] + b203*ak3[i] +
                                  b204*ak4[i] + b205*ak5[i] + b206*ak6[i] +
                                  b207*ak7[i] + b208*ak8[i] + b209*ak9[i] +
                                  b2010*ak10[i] + b2011*ak11[i] + b2012*ak12[i] +
                                  b2013*ak13[i] + b2014*ak14[i] +b2015*ak15[i] +
                                  b2016*ak16[i] + b2017*ak17[i] + b2018*ak18[i] +
                                  b2019*ak19[i]
                                  );
    }
    RightHandSide(yTemp, ak20);			//20th Stage
    
    for(G4int i=0;i<numberOfVariables;i++)
    {
        yTemp[i] = yIn[i] + Step*(b211*dydx[i] + b212*ak2[i] + b213*ak3[i] +
                                  b214*ak4[i] + b215*ak5[i] + b216*ak6[i] +
                                  b217*ak7[i] + b218*ak8[i] + b219*ak9[i] +
                                  b2110*ak10[i] + b2111*ak11[i] + b2112*ak12[i] +
                                  b2113*ak13[i] + b2114*ak14[i] +b2115*ak15[i] +
                                  b2116*ak16[i] + b2117*ak17[i] + b2118*ak18[i] +
                                  b2119*ak19[i] + b2120*ak20[i]
                                  );
    }
    RightHandSide(yTemp, ak21);			//21st Stage
    
    //    calculating extra stage functions
    
    //Evaluate the stages :
    
}
//For calculating the output at the tau fraction of Step
void VernerRK78::Interpolate_high( const G4double yInput[],
                 			       const G4double dydx[],
                                   const G4double Step,
                                         G4double yOut[],
                                         G4double tau ){
    G4double bi8[22][9], b[22];
    G4int numberOfVariables = this->GetNumberOfVariables();
    
    //    Coefficients for the interpolant bi8 with 21 stages
    
    bi8[1][1] =  1. ,
    bi8[1][2] = -10.03915465055451898280745009553727015838 ,
    bi8[1][3] =  53.79210495862331394937504547285261606206 ,
    bi8[1][4] = -165.0579057235472167092186792753028629327 ,
    bi8[1][5] =  298.0264565434610102489744601822776142620 ,
    bi8[1][6] = -311.9125448707900689751032283191627986699 ,
    bi8[1][7] =  174.6059852691171542761046061351126284335 ,
    bi8[1][8] = -40.37066163211959429657758663355894180800 ,
    
    bi8[2][1] =  0. ,
    bi8[2][2] =  0. ,
    bi8[2][3] =  0. ,
    bi8[2][4] =  0. ,
    bi8[2][5] =  0. ,
    bi8[2][6] =  0. ,
    bi8[2][7] =  0. ,
    bi8[2][8] =  0. ,
    
    bi8[3][1] =  0. ,
    bi8[3][2] =  0. ,
    bi8[3][3] =  0. ,
    bi8[3][4] =  0. ,
    bi8[3][5] =  0. ,
    bi8[3][6] =  0. ,
    bi8[3][7] =  0. ,
    bi8[3][8] =  0. ,
    
    bi8[4][1] =  0. ,
    bi8[4][2] =  0. ,
    bi8[4][3] =  0. ,
    bi8[4][4] =  0. ,
    bi8[4][5] =  0. ,
    bi8[4][6] =  0. ,
    bi8[4][7] =  0. ,
    bi8[4][8] =  0. ,
    
    bi8[5][1] =  0. ,
    bi8[5][2] =  0. ,
    bi8[5][3] =  0. ,
    bi8[5][4] =  0. ,
    bi8[5][5] =  0. ,
    bi8[5][6] =  0. ,
    bi8[5][7] =  0. ,
    bi8[5][8] =  0. ,
    
    bi8[6][1] =  0. ,
    bi8[6][2] =  158.1976739121776138067531004299642556045 ,
    bi8[6][3] = -1543.961417219490013383329186557376850919 ,
    bi8[6][4] =  6241.398747828780065219699818963300847515 ,
    bi8[6][5] = -13136.51615640610824674042591770724411138 ,
    bi8[6][6] =  15106.94849316959941770760848348143558467 ,
    bi8[6][7] = -8996.489626298230413000758717864256649583 ,
    bi8[6][8] =  2170.776389952444021264933974457050280938 ,
    
    bi8[7][1] =  0. ,
    bi8[7][2] =  110.7811520079778201620910891542159716196 ,
    bi8[7][3] = -1081.190514535617748557462051373884811281 ,
    bi8[7][4] =  4370.666940459977376891679103587685016930 ,
    bi8[7][5] = -9199.113723922197066947453657458673365167 ,
    bi8[7][6] =  10578.94920962985483690180716390515207397 ,
    bi8[7][7] = -6299.975594978841008450271944308599363057 ,
    bi8[7][8] =  1520.130500554341433782477059435641543286 ,
    
    bi8[8][1] =  0. ,
    bi8[8][2] = -7011.442038211314089634068023254940106045 ,
    bi8[8][3] =  68429.55220744077890209519664603903716349 ,
    bi8[8][4] = -276623.5714822198169288202316196287008724 ,
    bi8[8][5] =  582220.4545548494658856503006312634684934 ,
    bi8[8][6] = -669551.5244611245601905652331468068626208 ,
    bi8[8][7] =  398731.3087623332757943809792249308827732 ,
    bi8[8][8] = -96210.47174510666745715793578288559674281 ,
    
    bi8[9][1] =  0. ,
    bi8[9][2] =  11206.39756984814734031374482605836502113 ,
    bi8[9][3] = -109371.0485495066182770525095928736321803 ,
    bi8[9][4] =  442127.8393698154661543505844693555049508 ,
    bi8[9][5] = -930563.7629864562145364082427559715712707 ,
    bi8[9][6] =  1070145.133585590072636708771436125254933 ,
    bi8[9][7] = -637292.8058429046904373075590712408701797 ,
    bi8[9][8] =  153773.3309185793956820086499888593205888 ,
    
    bi8[10][1] =  0. ,
    bi8[10][2] = -14179.23164045568390825368995504736244876 ,
    bi8[10][3] =  138385.0093196357218693716546019209270760 ,
    bi8[10][4] = -559415.5490240869974273158302752589638112 ,
    bi8[10][5] =  1177423.794699250413603625249340565972051 ,
    bi8[10][6] = -1354033.322790821429356166591306087001182 ,
    bi8[10][7] =  806353.8938825050195016379699232308969498 ,
    bi8[10][8] = -194566.3328138133045593670938904445416121 ,
    
    bi8[11][1] =  0. ,
    bi8[11][2] =  10247.76176792174468727263230424253072668 ,
    bi8[11][3] = -100015.0532637523107509874155382267979521 ,
    bi8[11][4] =  404306.6240143429367125014776377339233105 ,
    bi8[11][5] = -850959.9711689702682710993795157496434280 ,
    bi8[11][6] =  978601.0462088684697300958464199995189771 ,
    bi8[11][7] = -582776.4729907748855939796622931794117500 ,
    bi8[11][8] =  140619.0037156383022701488158207833280861 ,
    
    bi8[12][1] =  0. ,
    bi8[12][2] = -105.4930397685096787379931952745881034169 ,
    bi8[12][3] =  1029.580139580310194120073236423148130618 ,
    bi8[12][4] = -4162.034181876452751021493197688100770349 ,
    bi8[12][5] =  8759.996193602336131526447045580160767641 ,
    bi8[12][6] = -10073.96555688604885441046004449728532151 ,
    bi8[12][7] =  5999.247741473950186438936812025268574829 ,
    bi8[12][8] = -1447.567428588892382130036646632729629570 ,
    
    bi8[13][1] =  0. ,
    bi8[13][2] =  0. ,
    bi8[13][3] =  0. ,
    bi8[13][4] =  0. ,
    bi8[13][5] =  0. ,
    bi8[13][6] =  0. ,
    bi8[13][7] =  0. ,
    bi8[13][8] =  0. ,
    
    bi8[14][1] =  0. ,
    bi8[14][2] = -14.86361337326743122469601010648237947608 ,
    bi8[14][3] =  145.7635936489486611601020590400812969906 ,
    bi8[14][4] = -587.6557063401913588520708808169444817103 ,
    bi8[14][5] =  1227.372151254555709980234511427063838550 ,
    bi8[14][6] = -1394.493105740553645217117387304216418608 ,
    bi8[14][7] =  816.8562950730668774494805290335070403105 ,
    bi8[14][8] = -192.9796145225588132959328212730088960570 ,
    
    bi8[15][1] =  0. ,
    bi8[15][2] =  14.34968575290546223276673100484047073648 ,
    bi8[15][3] = -150.2949344481665658851785896351738227010 ,
    bi8[15][4] =  629.4812425700290706612346725243246098946 ,
    bi8[15][5] = -1352.518207309060677914698908083510085133 ,
    bi8[15][6] =  1575.896933708880305858556996706058962503 ,
    bi8[15][7] = -946.7876580472948045886633971120598201035 ,
    bi8[15][8] =  229.8729377727072096359824945955196848017 ,
    
    bi8[16][1] =  0. ,
    bi8[16][2] = -102.5452470111040085560664290210906322518 ,
    bi8[16][3] =  1074.032661264680594125263250545103109541 ,
    bi8[16][4] = -4498.377917100410634753487685261882069653 ,
    bi8[16][5] =  9665.320624003280508099125255751992581938 ,
    bi8[16][6] = -11261.62224831288113545795903649800929060 ,
    bi8[16][7] =  6765.902468760784366342575368188597359812 ,
    bi8[16][8] = -1642.710341604349689799450723704711058784 ,
    
    bi8[17][1] =  0. ,
    bi8[17][2] = -38.13206313286473398334122725888547021750 ,
    bi8[17][3] =  399.3854658292328681862496726489289700594 ,
    bi8[17][4] = -1672.748720491971752312231602599596419744 ,
    bi8[17][5] =  3594.107254858566583822606674735752304040 ,
    bi8[17][6] = -4187.701556802926199931725021751236897492 ,
    bi8[17][7] =  2515.941280649063720613355430002270532846 ,
    bi8[17][8] = -610.8516609091004863949139257772330194915 ,
    
    bi8[18][1] =  0. ,
    bi8[18][2] = -66.38279583069588062871084016403504860018 ,
    bi8[18][3] =  595.8297683881103280237377269355990794854 ,
    bi8[18][4] = -2188.737060092971609278770563269347103559 ,
    bi8[18][5] =  4213.839795282852421559730676511794767863 ,
    bi8[18][6] = -4484.035731929196864370162258757955490985 ,
    bi8[18][7] =  2500.648251425346544829791147364129986790 ,
    bi8[18][8] = -571.1622272434449401356158886201861909946 ,
    
    bi8[19][1] =  0. ,
    bi8[19][2] = -90.41887573173058787343992868450872085904 ,
    bi8[19][3] =  931.9503884048153706496188381219698380844 ,
    bi8[19][4] = -3962.898377713156165984683269799703910403 ,
    bi8[19][5] =  8733.317420025551238329244389917866097896 ,
    bi8[19][6] = -10445.90818988766053535212385670877957360 ,
    bi8[19][7] =  6426.218942917598693647793004359979629852 ,
    bi8[19][8] = -1592.261308015418013416409177206823360972 ,
    
    bi8[20][1] =  0. ,
    bi8[20][2] = -59.73884363038871206457816967313835076801 ,
    bi8[20][3] =  544.8870146891724527559861176467523778088 ,
    bi8[20][4] = -2090.430374926312850791322527518588562537 ,
    bi8[20][5] =  4194.418982707226648046953315742901721971 ,
    bi8[20][6] = -4603.369436819628073439413527693451638704 ,
    bi8[20][7] =  2619.201413559297614510795648037620577207 ,
    bi8[20][8] = -604.9687555793670790184208565420961249773 ,
    
    bi8[21][1] =  0. ,
    bi8[21][2] = -59.20053764683937384859682230934791521325 ,
    bi8[21][3] =  571.7660156218088014286377638724659591261 ,
    bi8[21][4] = -2308.949564445360683785335401047607870804 ,
    bi8[21][5] =  4881.234110686139058221334453291392021952 ,
    bi8[21][6] = -5660.118807771202003386701685793459298252 ,
    bi8[21][7] =  3408.706689037421803199133730396931709513 ,
    bi8[21][8] = -833.4379054819676018284720384103746063216 ;

    for(G4int i = 0; i< numberOfVariables; i++)
        yIn[i] = yInput[i];
    
    G4double tau0 = tau;
    //    Calculating the polynomials :
    
    for(int i=1; i<=21; i++){	//Here i is NOT the coordinate no. , it's stage no.
        b[i] = 0;
        tau = tau0;
        for(int j=1; j<=8; j++){
            b[i] += bi8[i][j]*tau;
            tau*=tau0;
        }
    }
    
    for(int i=0; i<numberOfVariables; i++){		//Here is IS the cooridnate no.
        yOut[i] = yIn[i] + Step*(b[1]*dydx[i] + b[2]*ak2[i] + b[3]*ak3[i] +
                                 b[4]*ak4[i] + b[5]*ak5[i] + b[6]*ak6[i] +
                                 b[7]*ak7[i] + b[8]*ak8[i] + b[9]*ak9[i] +
                                 b[10]*ak10[i] + b[11]*ak11[i] + b[12]*ak12[i] +
                                 b[13]*ak13[i] + b[14]*ak14[i] + b[15]*ak15[i] +
                                 b[16]*ak16[i] + b[17]*ak17[i] + b[18]*ak18[i] +
                                 b[19]*ak19[i] + b[20]*ak20[i] + b[21]*ak21[i] );
    }

}






